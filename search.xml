<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[基于【Jenkins+GitLab+蒲公英】构建iOS持续化集成]]></title>
    <url>%2F2017%2F03%2F28%2FJenkinsCI%2F</url>
    <content type="text"><![CDATA[在iOS开发的过程中，除了面对各种产品需求，进行常规性的开发，还需要面对不停的打包测试。通常我们都是要把设备的ID添加到开发者账号，然后连上测试设备，进行编译运行，接下来就是漫长的等待。如果一个两个设备这样搞，也就忍了。但是如果遇到产品迭代迅速，你要基于不同的环境打包，要给很多不同的设备安装，你还能忍么？如果再遇到测试人员不在你身边，你又要导出ipa包传过去，然后再告诉他怎么安装，一系列的问题就出来了。面对这些问题，我们就该考虑怎么去提高整个过程的效率了。那么这时候就该Jenkins大展身手了。 什么是Jenkins那么什么是Jenkins呢？ Jenkins是一个用Java编写的开源的持续集成工具。在与Oracle发生争执后，项目从Hudson项目复刻。Jenkins提供了软件开发的持续集成服务。它运行在Servlet容器中（例如Apache Tomcat）。它支持软件配置管理（SCM）工具（包括AccuRev SCM、CVS、Subversion、Git、Perforce、Clearcase和RTC），可以执行基于Apache Ant和Apache Maven的项目，以及任意的Shell脚本和Windows批处理命令。——摘自Jenkins的维基百科 应用到iOS开发环境中，我们就可以用Jenkins处理上面提到的繁琐问题。通过Jenkins，我们可以通过一个GUI界面的按钮或者几句运行在终端的命令来实现这样一个过程：Jenkins从指定的Gitlab地址获取指定的Branch代码，然后基于这个Branch的代码进行自动化编译工程，并导出相应的ipa包，然后再把这个ipa包上传到蒲公英测试平台，最后发送邮件或者短信通知测试人员。而这个过程，毫不影响你处理其他事情。 怎么搭建Jenkins安装Jenkins安装Jenkins有2种常用方式，一种是基于Homebrew安装的，一种是去官网下载war包。 基于brew安装Homebrew 是macOS系统上一个不可或缺的套件管理器，如果你没安装，可以按照Homebrew官网上的安装方式安装。 1/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 打开你的终端，然后粘贴上面命令回车即可安装Homebrew。更详细的使用方法请Google。 通过Homebrew安装Jenkins也很简单，也是一条命令： 1brew install jenkins 安装完之后，我们可以通过Homebrew命令来管理Jenkins。 开启Jenkins： 1brew services start jenkins 停止Jenkins： 1brew services stop jenkins 基于war包安装基于war包安装的话，我们就需要去Jenkins官网下载相应的war包了。 如图所示，war包有两种，一种稳定包，一种开发包，根据你的需求选择对应的war包。 war包下载完毕后，我们在终端进入到war包所在的路径，然后执行下面的命令即可开启Jenkins。 1java -jar jenkins.war --httpPort=8080 不管你是通过哪种方式开启Jenkins，上述操作之后我们就可以打开Jenkins了，打开方式，在浏览器中输入下面地址： http://localhost:8080 这两种方式有个区别，通过Homebrew开启的Jenkins可以运行中后台服务.而通过war启动则不行，一旦你把终端关闭了，上述地址就无法访问了。 配置Jenkins第一次打开http://localhost:8080页面，会进入初始界面: 这个界面需要你输入初始密码才能进入配置页面，那么初始密码在哪里呢？在你通过终端安装Jenkins之后，会在终端中显示出来，如下图所示： 如果你没留意，或者没找到，那么没关系，我们还可以在Finder中找到。初始密码对应的Finder路径如下： 1/Users/***/.jenkins/secrets/initialAdminPassword 其中*替换成你的电脑用户名。 然后就进入到用户名、密码和邮箱设置页面，设置相关信息后，就进入到管理页面了。 安装所需插件针对我们今天要搭建的持续化集成流程，我们需要安装一些相关的插件，插件安装路径是在 系统管理 &gt; 管理插件 &gt; 可选插件。 GitLab Plugin GitLab Hook Plugin 我们的代码是托管在GitLab上面的，Jenkins里并没有包含GitLab相关的功能，而这个两个插件允许我们在Jenkins中能够获取到托管在GitLab上面的代码。 如果你的代码是托管在GitHub上的话，你可以下载对应的插件 GitHub Plugin。 Credentials Plugin 这是一个授权管理插件，可以存储一些管理凭证。 Keychains and Provisioning Profiles Management 当我们打包内测的时候，我们需要读取开发者证书和描述文件，安装这个插件，可以方便我们在Jenkins中设置相关信息。 Xcode integration 这个插件方便我们配置一些和Xcode工程相关的一些信息。 如果上述插件在可选插件中搜索不到，你可以在Google中搜索，下载对应的后缀为“hpi”文件，然后在 管理插件&gt;高级 中上传你下载的文件。如下图所示： 创建与配置Jenkins项目我们在Jenkins主页左边可以看到一系列菜单，我们点击新建，进入到创建项目页面，如下图所示： 这里提供了一系列创建模板，这里我们选择第一个，构建一个自由风格的软件项目，项目名字随便填写。 General 这个模块只是一些简单配置，显示项目名字，以及项目描述，其他一些选项可以根据所需选择。这里我们不做其他处理。 源码管理 这里我们选择Git方式，Repositories URL 写入你的GitLab项目地址，HTTPS 和 SSH 两种方式都可以，只要保证 Credentials 和你选择的URL方式对应上就行。 Branch Specifier 允许你指定要构建哪个分支的代码。 点击 Credentials 旁边的ADD进入 Credentials 配置界面。 如果你的URL方式选择的是 HTTPS，这里就要对应 Username with password，如果是SSH，那么对应的选择 SSH Username with private key。 如果你选择了 SSH，有个注意点，这里 Private Key 添加方式有3种，你可以自己选择，注意的是这里要添加的是私钥。而我们通常在GitHub和GitLab配置的都是公钥。不要忘记了。Passphrase 这里填入你的私钥密码，如果你设置密码了的话。 构建触发器 构建触发器有多种方式，通过远程命令、Hook GitLab的提交或者定期构建，多种方式满足你的构建需求。这里我们选择 触发远程构建 选项，触发地址拼接方式如上图中所提示的。 123JENKINS_URL/job/TestCIDemo/build?token=TOKEN_NAMEJENKINS_URL/job/TestCIDemo/buildWithParameters?token=TOKEN_NAME 这是2种方式，其中 TOKEN_NAME 就是你填写的身份验证令牌。具体怎么通过这个拼接的URL触发远程构建，我们在下面会详细说明。 构建环境在配置构建环境之前，我们需要导入我们打包所需要的证书和对应的描述文件。我们进入到 系统管理，选择 Keychains and Provisioning Profiles Management 这里我们需要上传的Keychain和描述文件。这里的Keychain指的是 login.keychain 文件，文件路径如下： 1~/Library/Keychains 描述文件指的你要打包对应的文件，路径如下： 1~/Library/MobileDevice/Provisioning Profiles 上传完之后，就显示如上图所示效果。Keychain中的Password指的你电脑钥匙串密码，这里是授权Jenkins读取打包证书信息。 然后我们回到我们创建的项目配置页面，找到构建环境，勾选 Keychains and Code Signing Identities 和Mobile Provisioning Profiles 。如果这时候你去发选择签名证书的话，你需要先保存或者APPLY以下，然后刷新下就会显示对应数据。最终如下图所示： 构建构建方式也有很多，对应iOS中，你可以选择 Xcode build，也可以选择 Execute shell。这里我们选择更有逼格的 Execute shell 方式，选择命令构建。 1234if [ -d "$&#123;WORKSPACE&#125;/build" ]; then rm -rf $&#123;WORKSPACE&#125;/build; fi;mkdir $&#123;WORKSPACE&#125;/build;xcodebuild -project /Users/angel/Desktop/TestDemo/TestDemo.xcodeproj -scheme "TestDemo" -sdk iphoneos archive -archivePath $&#123;WORKSPACE&#125;/build/archive CODE_SIGN_IDENTITY="iPhone Distribution: ***";xcodebuild -exportArchive -exportFormat IPA -archivePath $&#123;WORKSPACE&#125;/build/archive.xcarchive -exportPath $&#123;WORKSPACE&#125;/build/$&#123;JOB_NAME&#125;.ipa -exportProvisioningProfile "***"; 其中 ${WORKSPACE} 指的的是当前项目的地址： 1/Users/用户名/.jenkins/jobs/TestCIDemo/workspace 关于通过 xcodebuild 编译打包的教程，请自行谷歌。CODE_SIGN_IDENTITY=&quot;iPhone Distribution: ***&quot; 这里的 iPhone Distribution: *** 替换你自己的证书名称， exportProvisioningProfile &quot;***&quot; 这里的 *** 替换你所打包对应的描述文件的名字， /Users/angel/Desktop/TestDemo/TestDemo.xcodeproj 这里替换你自己项目对应的本地路径。这其中的流程就是：编译项目，archive出对应的archive包，然后到处ipa包。 构建后操作到这一步，我们已经得到了最终的ipa包了，接下来我们就需把ipa包上传到蒲公英测试平台了，我们同样采取命令方式上传。蒲公英测试平台提供了对应的上传方式。这里我们选择 Execute a set scripts。 1234curl -F "file=@&#123;$filePath&#125;" \-F "uKey=&#123;$uKey&#125;" \-F "_api_key=&#123;$apiKey&#125;" \https://www.pgyer.com/apiv1/app/upload 其中： {$filePath} 是应用安装包文件的路径，也就是上面我们打包导出ipa文件的路径。 {$uKey} 是开发者的用户 Key，在应用管理-API中查看 {$apiKey} 是开发者的 API Key，在应用管理-API中查看 上传完之后，你就可以在蒲公英平台下载测试了，你还可以在蒲公英平台设置要通知的测试人员。 最终执行构建的方式到这里，我们已经完成一系列的配置工作，接下来，我们就需要进行最终的构建。有2种方式可以触发我们的构建。 在Jenkins页面中点击立即构建按钮进行构建 配置上述操作后，我们保存后回到这个页面，然后点击构建，就开始了构建操作，构建结束后会在Build History显示构建历史，如果构建失败了，我们也可以在构建历史中找到原因，进行修改解决错误。 远程命令行触发构建 这里就要用到我们上面配置 构建触发器 是所填写的信息了。在终端执行以下命令： 1curl -s -u username:*** -X POST http://localhost:8080/job/TestCIDemo/build --data token=TOKEN_NAME 其中 username:*** 信息，我们可以在 用户 &gt; 设置 找到， *** 用 API Token 替换。 我们还可以通过AppleScript创建个应用程序，这样的话，我们也不用进入到Jenkins页面，也不用每次在终端中输入一串命令，我们只需要动动手指点击一下，那么我们还需要怎么做呢？我们打开应用程序 脚本编辑器 ，在编辑器中输入下面代码： 123tell application "Terminal"do script "curl -s -u username:*** -X POST http://localhost:8080/job/TestCIDemo/build --data token=TOKEN_NAME" end tell· 然后保存，导出成应用程序，如下图： 然后我们就得到了一个应用程序，以后每次构建的时候点击它就行了。前提你是通过 Homebrew 开启的后台服务。 结束语到这里，所有的操作都告一段落，我们在开头所提到的不能忍受的问题也得以解决。整个配置过程不算是很麻烦，但是会遇到各种各样的问题。遇到问题，我们就去Google解决问题，这样才能不断的成长。当然Jenkins的功能远远不止这些，更多功能还需要继续探索。 第一次写这么多内容，如有纰漏之处，还望各位读者能指点一二，不胜感激。当然，如果你有什么问题，你可以下面留言或者给我发邮件，我一定知无不言。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>GitLab</tag>
        <tag>iOS</tag>
        <tag>CI</tag>
      </tags>
  </entry>
</search>
